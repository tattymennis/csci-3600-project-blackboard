@model csci_3600_project_the_struggle.Models.BlackboardViewModel

@{
    ViewBag.Title = "Blackboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
<script>
    var posts = @Html.Raw(Json.Encode(Model.Blackboard.BoardPosts));
    // .ready runs as soon as DOM is loaded
    $().ready(function () {         
        for (var i = 0; i < posts.length; i++)
        {
            var post = posts[i]
            
            if (i % 2 == 0) {
                $('#panelsL').append(
                '<div class="panel panel-transparent">' +
                '<div class="panel-heading">' +
                '<h4 class="panel-title">' + post["Id"] + ' | ' + post["Poster"] + ' | ' + getJSDateTime(post["PostTime"]) + '</h4>' + 
                '<div class="panel-body">' + post["Content"] +
                '<div class="panel-footer panel-transparent">' + '<button class="btn btn-primary btn-sm decrypt-btn">Decrypt' + '</button>' + 
                //'<div class="panel-footer">' + '<button type="button" class="btn btn-primary btn-sm decrypt-btn">Decrypt' + '</button>' + 
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>'
                )}
            else{
                $('#panelsR').append(
                '<div class="panel panel-transparent">' +
                '<div class="panel-heading">' +
                '<h4 class="panel-title">' + post["Id"] + ' | ' + post["Poster"] + ' | ' + getJSDateTime(post["PostTime"]) + '</h4>' +
                '<div class="panel-body">' + post["Content"] +
                //'<div class="panel-footer">' + '<button class="btn btn-primary btn-sm decrypt-btn">Decrypt' + '</button>' + 
                '<div class="panel-footer panel-transparent">' + '<button class="btn btn-primary btn-sm decrypt-btn">Decrypt' + '</button>' + 
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>'
                )}
        }

        // Regex source: http://www.developer.com/net/dealing-with-json-dates-in-asp.net-mvc.html
        function getJSDateTime(data) {
            var pattern = /Date\(([^)]+)\)/;
            var results = pattern.exec(data);
            var dt = new Date(parseFloat(results[1]));
            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
        }

        $('.decrypt-btn').click(function() {
            $(this).parent().prepend(
            '<div class="key-form-group">' +
            '<label for="key">Password:</label>' +
            '<input type="text" class="password-form form-control" id="passwordTextBox" Maxlength="255">' +
            '<button class="btn btn-primary btn-sm decrypt-btn-submit">Submit' + '</button>' +
            '</div>'
            )
            $(this).remove()        
        })

        // $('.decrypt-btn-submit').on('click', function() {
        $(document).on('click', '.decrypt-btn-submit', function(e) {
            //e.preventDefault()
            var plaintext;
            // get id to send to Blackboard Controller
            var parent_footer = $(this).parent().parent().parent().parent()
            var id = parent_footer.text().split('|',1)
            id = id[0]

            var _url = '@Url.Action("GetAjaxPlaintext", "Blackboard", null, Request.Url.Scheme, null)'
            $.ajax({
                url: _url,
                data: JSON.stringify({ 'Id' : id, 'Password' : $('.password-form').val() }),
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                async: false, // necessary b/c plaintext isn't updated when ajax completes
                success: function(data, textStatus, jqxhr) {
                    plaintext = data.ptxt 
                    //alert(plaintext)
                }
            });
            $(this).parent().parent().parent().text(plaintext)
            $(this).parent().remove()       
        })
    })
</script>         
}

<!-- Board -->
<div class="board">
    <div class="post-wrapper">
        <div class="container text-center" id="blackboard">
            <div class="row">
                <div class="col-md-6">
                    <div class="panel-group" id="panelsL">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="panel-group" id="panelsR">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Forms -->
<div class="container">
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("BlackboardView", "Blackboard", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.UserHandle, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.UserHandle, new { @class = "form-control" })
                    </div>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.Message, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.Message, new { @class = "form-control" })
                    </div>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.ValidationMessage(nameof(Model.EncryptionChoice))
                <div class="form-group">
                    @Html.LabelFor(m => m.EncryptionChoice, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.EncryptionChoice, Model.Encryption)
                    </div>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.EncryptionKey, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        <!--Html.TextBoxFor(m => m.EncryptionKey, new { //class = "form-control" })-->
                        @Html.PasswordFor(m => m.EncryptionKey, new { @class = "form-control" })

                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6">
                        <input type="submit" class="btn btn-default" value="Post" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>


